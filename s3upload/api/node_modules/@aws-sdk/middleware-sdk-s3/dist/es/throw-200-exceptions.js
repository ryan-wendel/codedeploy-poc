import { __awaiter, __generator } from "tslib";
import { HttpResponse } from "@aws-sdk/protocol-http";
/**
 * In case of an internal error/terminated connection, S3 operations may return 200 errors. CopyObject, UploadPartCopy,
 * CompleteMultipartUpload may return empty payload or payload with only xml Preamble.
 * @internal
 */
export var throw200ExceptionsMiddleware = function (config) { return function (next) { return function (args) { return __awaiter(void 0, void 0, void 0, function () {
    var result, response, statusCode, body, bodyBytes, bodyString, err;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, next(args)];
            case 1:
                result = _a.sent();
                response = result.response;
                if (!HttpResponse.isInstance(response))
                    return [2 /*return*/, result];
                statusCode = response.statusCode, body = response.body;
                if (statusCode < 200 && statusCode >= 300)
                    return [2 /*return*/, result];
                return [4 /*yield*/, collectBody(body, config)];
            case 2:
                bodyBytes = _a.sent();
                return [4 /*yield*/, collectBodyString(bodyBytes, config)];
            case 3:
                bodyString = _a.sent();
                if (bodyBytes.length === 0) {
                    err = new Error("S3 aborted request");
                    err.name = "InternalError";
                    throw err;
                }
                if (bodyString && bodyString.match("<Error>")) {
                    // Set the error code to 4XX so that error deserializer can parse them
                    response.statusCode = 400;
                }
                // Body stream is consumed and paused at this point. So replace the response.body to the collected bytes.
                // So that the deserializer can consume the body as normal.
                response.body = bodyBytes;
                return [2 /*return*/, result];
        }
    });
}); }; }; };
// Collect low-level response body stream to Uint8Array.
var collectBody = function (streamBody, context) {
    if (streamBody === void 0) { streamBody = new Uint8Array(); }
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
// Encode Uint8Array data into string with utf-8.
var collectBodyString = function (streamBody, context) {
    return collectBody(streamBody, context).then(function (body) { return context.utf8Encoder(body); });
};
/**
 * @internal
 */
export var throw200ExceptionsMiddlewareOptions = {
    relation: "after",
    toMiddleware: "deserializerMiddleware",
    tags: ["THROW_200_EXCEPTIONS", "S3"],
    name: "throw200ExceptionsMiddleware",
};
/**
 *
 * @internal
 */
export var getThrow200ExceptionsPlugin = function (config) { return ({
    applyToStack: function (clientStack) {
        clientStack.addRelativeTo(throw200ExceptionsMiddleware(config), throw200ExceptionsMiddlewareOptions);
    },
}); };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhyb3ctMjAwLWV4Y2VwdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGhyb3ctMjAwLWV4Y2VwdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQVF0RDs7OztHQUlHO0FBQ0gsTUFBTSxDQUFDLElBQU0sNEJBQTRCLEdBQUcsVUFBQyxNQUEwQixJQUFzQyxPQUFBLFVBQzNHLElBQUksSUFDRCxPQUFBLFVBQU8sSUFBSTs7OztvQkFDQyxxQkFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUE7O2dCQUF6QixNQUFNLEdBQUcsU0FBZ0I7Z0JBQ3ZCLFFBQVEsR0FBSyxNQUFNLFNBQVgsQ0FBWTtnQkFDNUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDO29CQUFFLHNCQUFPLE1BQU0sRUFBQztnQkFDOUMsVUFBVSxHQUFXLFFBQVEsV0FBbkIsRUFBRSxJQUFJLEdBQUssUUFBUSxLQUFiLENBQWM7Z0JBQ3RDLElBQUksVUFBVSxHQUFHLEdBQUcsSUFBSSxVQUFVLElBQUksR0FBRztvQkFBRSxzQkFBTyxNQUFNLEVBQUM7Z0JBR3ZDLHFCQUFNLFdBQVcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLEVBQUE7O2dCQUEzQyxTQUFTLEdBQUcsU0FBK0I7Z0JBQzlCLHFCQUFNLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsRUFBQTs7Z0JBQXZELFVBQVUsR0FBRyxTQUEwQztnQkFDN0QsSUFBSSxTQUFTLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtvQkFDcEIsR0FBRyxHQUFHLElBQUksS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7b0JBQzVDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsZUFBZSxDQUFDO29CQUMzQixNQUFNLEdBQUcsQ0FBQztpQkFDWDtnQkFDRCxJQUFJLFVBQVUsSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFO29CQUM3QyxzRUFBc0U7b0JBQ3RFLFFBQVEsQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO2lCQUMzQjtnQkFFRCx5R0FBeUc7Z0JBQ3pHLDJEQUEyRDtnQkFDM0QsUUFBUSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUM7Z0JBQzFCLHNCQUFPLE1BQU0sRUFBQzs7O0tBQ2YsRUF4QkksQ0F3QkosRUExQjRHLENBMEI1RyxDQUFDO0FBRUYsd0RBQXdEO0FBQ3hELElBQU0sV0FBVyxHQUFHLFVBQUMsVUFBa0MsRUFBRSxPQUEyQjtJQUEvRCwyQkFBQSxFQUFBLGlCQUFzQixVQUFVLEVBQUU7SUFDckQsSUFBSSxVQUFVLFlBQVksVUFBVSxFQUFFO1FBQ3BDLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUNwQztJQUNELE9BQU8sT0FBTyxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksVUFBVSxFQUFFLENBQUMsQ0FBQztBQUNsRixDQUFDLENBQUM7QUFFRixpREFBaUQ7QUFDakQsSUFBTSxpQkFBaUIsR0FBRyxVQUFDLFVBQWUsRUFBRSxPQUEyQjtJQUNyRSxPQUFBLFdBQVcsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsSUFBSSxJQUFLLE9BQUEsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBekIsQ0FBeUIsQ0FBQztBQUExRSxDQUEwRSxDQUFDO0FBRTdFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLElBQU0sbUNBQW1DLEdBQThCO0lBQzVFLFFBQVEsRUFBRSxPQUFPO0lBQ2pCLFlBQVksRUFBRSx3QkFBd0I7SUFDdEMsSUFBSSxFQUFFLENBQUMsc0JBQXNCLEVBQUUsSUFBSSxDQUFDO0lBQ3BDLElBQUksRUFBRSw4QkFBOEI7Q0FDckMsQ0FBQztBQUVGOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxJQUFNLDJCQUEyQixHQUFHLFVBQUMsTUFBMEIsSUFBMEIsT0FBQSxDQUFDO0lBQy9GLFlBQVksRUFBRSxVQUFDLFdBQVc7UUFDeEIsV0FBVyxDQUFDLGFBQWEsQ0FBQyw0QkFBNEIsQ0FBQyxNQUFNLENBQUMsRUFBRSxtQ0FBbUMsQ0FBQyxDQUFDO0lBQ3ZHLENBQUM7Q0FDRixDQUFDLEVBSjhGLENBSTlGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwUmVzcG9uc2UgfSBmcm9tIFwiQGF3cy1zZGsvcHJvdG9jb2wtaHR0cFwiO1xuaW1wb3J0IHsgRGVzZXJpYWxpemVNaWRkbGV3YXJlLCBFbmNvZGVyLCBQbHVnZ2FibGUsIFJlbGF0aXZlTWlkZGxld2FyZU9wdGlvbnMsIFN0cmVhbUNvbGxlY3RvciB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuXG50eXBlIFByZXZpb3VzbHlSZXNvbHZlZCA9IHtcbiAgc3RyZWFtQ29sbGVjdG9yOiBTdHJlYW1Db2xsZWN0b3I7XG4gIHV0ZjhFbmNvZGVyOiBFbmNvZGVyO1xufTtcblxuLyoqXG4gKiBJbiBjYXNlIG9mIGFuIGludGVybmFsIGVycm9yL3Rlcm1pbmF0ZWQgY29ubmVjdGlvbiwgUzMgb3BlcmF0aW9ucyBtYXkgcmV0dXJuIDIwMCBlcnJvcnMuIENvcHlPYmplY3QsIFVwbG9hZFBhcnRDb3B5LFxuICogQ29tcGxldGVNdWx0aXBhcnRVcGxvYWQgbWF5IHJldHVybiBlbXB0eSBwYXlsb2FkIG9yIHBheWxvYWQgd2l0aCBvbmx5IHhtbCBQcmVhbWJsZS5cbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgdGhyb3cyMDBFeGNlcHRpb25zTWlkZGxld2FyZSA9IChjb25maWc6IFByZXZpb3VzbHlSZXNvbHZlZCk6IERlc2VyaWFsaXplTWlkZGxld2FyZTxhbnksIGFueT4gPT4gKFxuICBuZXh0XG4pID0+IGFzeW5jIChhcmdzKSA9PiB7XG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG5leHQoYXJncyk7XG4gIGNvbnN0IHsgcmVzcG9uc2UgfSA9IHJlc3VsdDtcbiAgaWYgKCFIdHRwUmVzcG9uc2UuaXNJbnN0YW5jZShyZXNwb25zZSkpIHJldHVybiByZXN1bHQ7XG4gIGNvbnN0IHsgc3RhdHVzQ29kZSwgYm9keSB9ID0gcmVzcG9uc2U7XG4gIGlmIChzdGF0dXNDb2RlIDwgMjAwICYmIHN0YXR1c0NvZGUgPj0gMzAwKSByZXR1cm4gcmVzdWx0O1xuXG4gIC8vIFRocm93IDJYWCByZXNwb25zZSB0aGF0J3MgZWl0aGVyIGFuIGVycm9yIG9yIGhhcyBlbXB0eSBib2R5LlxuICBjb25zdCBib2R5Qnl0ZXMgPSBhd2FpdCBjb2xsZWN0Qm9keShib2R5LCBjb25maWcpO1xuICBjb25zdCBib2R5U3RyaW5nID0gYXdhaXQgY29sbGVjdEJvZHlTdHJpbmcoYm9keUJ5dGVzLCBjb25maWcpO1xuICBpZiAoYm9keUJ5dGVzLmxlbmd0aCA9PT0gMCkge1xuICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcihcIlMzIGFib3J0ZWQgcmVxdWVzdFwiKTtcbiAgICBlcnIubmFtZSA9IFwiSW50ZXJuYWxFcnJvclwiO1xuICAgIHRocm93IGVycjtcbiAgfVxuICBpZiAoYm9keVN0cmluZyAmJiBib2R5U3RyaW5nLm1hdGNoKFwiPEVycm9yPlwiKSkge1xuICAgIC8vIFNldCB0aGUgZXJyb3IgY29kZSB0byA0WFggc28gdGhhdCBlcnJvciBkZXNlcmlhbGl6ZXIgY2FuIHBhcnNlIHRoZW1cbiAgICByZXNwb25zZS5zdGF0dXNDb2RlID0gNDAwO1xuICB9XG5cbiAgLy8gQm9keSBzdHJlYW0gaXMgY29uc3VtZWQgYW5kIHBhdXNlZCBhdCB0aGlzIHBvaW50LiBTbyByZXBsYWNlIHRoZSByZXNwb25zZS5ib2R5IHRvIHRoZSBjb2xsZWN0ZWQgYnl0ZXMuXG4gIC8vIFNvIHRoYXQgdGhlIGRlc2VyaWFsaXplciBjYW4gY29uc3VtZSB0aGUgYm9keSBhcyBub3JtYWwuXG4gIHJlc3BvbnNlLmJvZHkgPSBib2R5Qnl0ZXM7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyBDb2xsZWN0IGxvdy1sZXZlbCByZXNwb25zZSBib2R5IHN0cmVhbSB0byBVaW50OEFycmF5LlxuY29uc3QgY29sbGVjdEJvZHkgPSAoc3RyZWFtQm9keTogYW55ID0gbmV3IFVpbnQ4QXJyYXkoKSwgY29udGV4dDogUHJldmlvdXNseVJlc29sdmVkKTogUHJvbWlzZTxVaW50OEFycmF5PiA9PiB7XG4gIGlmIChzdHJlYW1Cb2R5IGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoc3RyZWFtQm9keSk7XG4gIH1cbiAgcmV0dXJuIGNvbnRleHQuc3RyZWFtQ29sbGVjdG9yKHN0cmVhbUJvZHkpIHx8IFByb21pc2UucmVzb2x2ZShuZXcgVWludDhBcnJheSgpKTtcbn07XG5cbi8vIEVuY29kZSBVaW50OEFycmF5IGRhdGEgaW50byBzdHJpbmcgd2l0aCB1dGYtOC5cbmNvbnN0IGNvbGxlY3RCb2R5U3RyaW5nID0gKHN0cmVhbUJvZHk6IGFueSwgY29udGV4dDogUHJldmlvdXNseVJlc29sdmVkKTogUHJvbWlzZTxzdHJpbmc+ID0+XG4gIGNvbGxlY3RCb2R5KHN0cmVhbUJvZHksIGNvbnRleHQpLnRoZW4oKGJvZHkpID0+IGNvbnRleHQudXRmOEVuY29kZXIoYm9keSkpO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgdGhyb3cyMDBFeGNlcHRpb25zTWlkZGxld2FyZU9wdGlvbnM6IFJlbGF0aXZlTWlkZGxld2FyZU9wdGlvbnMgPSB7XG4gIHJlbGF0aW9uOiBcImFmdGVyXCIsXG4gIHRvTWlkZGxld2FyZTogXCJkZXNlcmlhbGl6ZXJNaWRkbGV3YXJlXCIsXG4gIHRhZ3M6IFtcIlRIUk9XXzIwMF9FWENFUFRJT05TXCIsIFwiUzNcIl0sXG4gIG5hbWU6IFwidGhyb3cyMDBFeGNlcHRpb25zTWlkZGxld2FyZVwiLFxufTtcblxuLyoqXG4gKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRUaHJvdzIwMEV4Y2VwdGlvbnNQbHVnaW4gPSAoY29uZmlnOiBQcmV2aW91c2x5UmVzb2x2ZWQpOiBQbHVnZ2FibGU8YW55LCBhbnk+ID0+ICh7XG4gIGFwcGx5VG9TdGFjazogKGNsaWVudFN0YWNrKSA9PiB7XG4gICAgY2xpZW50U3RhY2suYWRkUmVsYXRpdmVUbyh0aHJvdzIwMEV4Y2VwdGlvbnNNaWRkbGV3YXJlKGNvbmZpZyksIHRocm93MjAwRXhjZXB0aW9uc01pZGRsZXdhcmVPcHRpb25zKTtcbiAgfSxcbn0pO1xuIl19