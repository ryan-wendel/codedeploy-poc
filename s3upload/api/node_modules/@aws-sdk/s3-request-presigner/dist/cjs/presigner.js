"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3RequestPresigner = void 0;
const signature_v4_1 = require("@aws-sdk/signature-v4");
const constants_1 = require("./constants");
class S3RequestPresigner {
    constructor(options) {
        const resolvedOptions = {
            // Allow `signingName` because we want to support usecase of supply client's resolved config
            // directly. Where service equals signingName.
            service: options.signingName || options.service || "s3",
            uriEscapePath: options.uriEscapePath || false,
            ...options,
        };
        this.signer = new signature_v4_1.SignatureV4(resolvedOptions);
    }
    async presign(requestToSign, { unsignableHeaders = new Set(), unhoistableHeaders = new Set(), ...options } = {}) {
        unsignableHeaders.add("content-type");
        // S3 requires SSE headers to be signed in headers instead of query
        // See: https://github.com/aws/aws-sdk-js-v3/issues/1576
        Object.keys(requestToSign.headers)
            .map((header) => header.toLowerCase())
            .filter((header) => header.startsWith("x-amz-server-side-encryption"))
            .forEach((header) => {
            unhoistableHeaders.add(header);
        });
        requestToSign.headers[constants_1.SHA256_HEADER] = constants_1.UNSIGNED_PAYLOAD;
        return this.signer.presign(requestToSign, {
            expiresIn: 900,
            unsignableHeaders,
            unhoistableHeaders,
            ...options,
        });
    }
}
exports.S3RequestPresigner = S3RequestPresigner;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2lnbmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3ByZXNpZ25lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx3REFBNEY7QUFJNUYsMkNBQThEO0FBYzlELE1BQWEsa0JBQWtCO0lBRTdCLFlBQVksT0FBa0M7UUFDNUMsTUFBTSxlQUFlLEdBQUc7WUFDdEIsNEZBQTRGO1lBQzVGLDhDQUE4QztZQUM5QyxPQUFPLEVBQUUsT0FBTyxDQUFDLFdBQVcsSUFBSSxPQUFPLENBQUMsT0FBTyxJQUFJLElBQUk7WUFDdkQsYUFBYSxFQUFFLE9BQU8sQ0FBQyxhQUFhLElBQUksS0FBSztZQUM3QyxHQUFHLE9BQU87U0FDWCxDQUFDO1FBQ0YsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLDBCQUFXLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVNLEtBQUssQ0FBQyxPQUFPLENBQ2xCLGFBQTJCLEVBQzNCLEVBQUUsaUJBQWlCLEdBQUcsSUFBSSxHQUFHLEVBQUUsRUFBRSxrQkFBa0IsR0FBRyxJQUFJLEdBQUcsRUFBRSxFQUFFLEdBQUcsT0FBTyxLQUFpQyxFQUFFO1FBRTlHLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUN0QyxtRUFBbUU7UUFDbkUsd0RBQXdEO1FBQ3hELE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQzthQUMvQixHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQzthQUNyQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsOEJBQThCLENBQUMsQ0FBQzthQUNyRSxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUNsQixrQkFBa0IsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDakMsQ0FBQyxDQUFDLENBQUM7UUFDTCxhQUFhLENBQUMsT0FBTyxDQUFDLHlCQUFhLENBQUMsR0FBRyw0QkFBZ0IsQ0FBQztRQUN4RCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRTtZQUN4QyxTQUFTLEVBQUUsR0FBRztZQUNkLGlCQUFpQjtZQUNqQixrQkFBa0I7WUFDbEIsR0FBRyxPQUFPO1NBQ1gsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBbENELGdEQWtDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNpZ25hdHVyZVY0LCBTaWduYXR1cmVWNENyeXB0b0luaXQsIFNpZ25hdHVyZVY0SW5pdCB9IGZyb20gXCJAYXdzLXNkay9zaWduYXR1cmUtdjRcIjtcbmltcG9ydCB7IFJlcXVlc3RQcmVzaWduZXIsIFJlcXVlc3RQcmVzaWduaW5nQXJndW1lbnRzIH0gZnJvbSBcIkBhd3Mtc2RrL3R5cGVzXCI7XG5pbXBvcnQgeyBIdHRwUmVxdWVzdCBhcyBJSHR0cFJlcXVlc3QgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcblxuaW1wb3J0IHsgU0hBMjU2X0hFQURFUiwgVU5TSUdORURfUEFZTE9BRCB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuXG4vKipcbiAqIFBhcnRpYWxCeTxULCBLPiBtYWtlcyBwcm9wZXJ0aWVzIHNwZWNpZmllZCBpbiBLIG9wdGlvbmFsIGluIGludGVyZmFjZSBUXG4gKiBzZWU6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQzMTU5ODg3L21ha2UtYS1zaW5nbGUtcHJvcGVydHktb3B0aW9uYWwtaW4tdHlwZXNjcmlwdFxuICogKi9cbnR5cGUgT21pdDxULCBLIGV4dGVuZHMga2V5b2YgVD4gPSBQaWNrPFQsIEV4Y2x1ZGU8a2V5b2YgVCwgSz4+O1xudHlwZSBQYXJ0aWFsQnk8VCwgSyBleHRlbmRzIGtleW9mIFQ+ID0gT21pdDxULCBLPiAmIFBhcnRpYWw8UGljazxULCBLPj47XG5cbmV4cG9ydCB0eXBlIFMzUmVxdWVzdFByZXNpZ25lck9wdGlvbnMgPSBQYXJ0aWFsQnk8XG4gIFNpZ25hdHVyZVY0SW5pdCAmIFNpZ25hdHVyZVY0Q3J5cHRvSW5pdCxcbiAgXCJzZXJ2aWNlXCIgfCBcInVyaUVzY2FwZVBhdGhcIlxuPiAmIHsgc2lnbmluZ05hbWU/OiBzdHJpbmcgfTtcblxuZXhwb3J0IGNsYXNzIFMzUmVxdWVzdFByZXNpZ25lciBpbXBsZW1lbnRzIFJlcXVlc3RQcmVzaWduZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IHNpZ25lcjogU2lnbmF0dXJlVjQ7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IFMzUmVxdWVzdFByZXNpZ25lck9wdGlvbnMpIHtcbiAgICBjb25zdCByZXNvbHZlZE9wdGlvbnMgPSB7XG4gICAgICAvLyBBbGxvdyBgc2lnbmluZ05hbWVgIGJlY2F1c2Ugd2Ugd2FudCB0byBzdXBwb3J0IHVzZWNhc2Ugb2Ygc3VwcGx5IGNsaWVudCdzIHJlc29sdmVkIGNvbmZpZ1xuICAgICAgLy8gZGlyZWN0bHkuIFdoZXJlIHNlcnZpY2UgZXF1YWxzIHNpZ25pbmdOYW1lLlxuICAgICAgc2VydmljZTogb3B0aW9ucy5zaWduaW5nTmFtZSB8fCBvcHRpb25zLnNlcnZpY2UgfHwgXCJzM1wiLFxuICAgICAgdXJpRXNjYXBlUGF0aDogb3B0aW9ucy51cmlFc2NhcGVQYXRoIHx8IGZhbHNlLFxuICAgICAgLi4ub3B0aW9ucyxcbiAgICB9O1xuICAgIHRoaXMuc2lnbmVyID0gbmV3IFNpZ25hdHVyZVY0KHJlc29sdmVkT3B0aW9ucyk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgcHJlc2lnbihcbiAgICByZXF1ZXN0VG9TaWduOiBJSHR0cFJlcXVlc3QsXG4gICAgeyB1bnNpZ25hYmxlSGVhZGVycyA9IG5ldyBTZXQoKSwgdW5ob2lzdGFibGVIZWFkZXJzID0gbmV3IFNldCgpLCAuLi5vcHRpb25zIH06IFJlcXVlc3RQcmVzaWduaW5nQXJndW1lbnRzID0ge31cbiAgKTogUHJvbWlzZTxJSHR0cFJlcXVlc3Q+IHtcbiAgICB1bnNpZ25hYmxlSGVhZGVycy5hZGQoXCJjb250ZW50LXR5cGVcIik7XG4gICAgLy8gUzMgcmVxdWlyZXMgU1NFIGhlYWRlcnMgdG8gYmUgc2lnbmVkIGluIGhlYWRlcnMgaW5zdGVhZCBvZiBxdWVyeVxuICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2F3cy9hd3Mtc2RrLWpzLXYzL2lzc3Vlcy8xNTc2XG4gICAgT2JqZWN0LmtleXMocmVxdWVzdFRvU2lnbi5oZWFkZXJzKVxuICAgICAgLm1hcCgoaGVhZGVyKSA9PiBoZWFkZXIudG9Mb3dlckNhc2UoKSlcbiAgICAgIC5maWx0ZXIoKGhlYWRlcikgPT4gaGVhZGVyLnN0YXJ0c1dpdGgoXCJ4LWFtei1zZXJ2ZXItc2lkZS1lbmNyeXB0aW9uXCIpKVxuICAgICAgLmZvckVhY2goKGhlYWRlcikgPT4ge1xuICAgICAgICB1bmhvaXN0YWJsZUhlYWRlcnMuYWRkKGhlYWRlcik7XG4gICAgICB9KTtcbiAgICByZXF1ZXN0VG9TaWduLmhlYWRlcnNbU0hBMjU2X0hFQURFUl0gPSBVTlNJR05FRF9QQVlMT0FEO1xuICAgIHJldHVybiB0aGlzLnNpZ25lci5wcmVzaWduKHJlcXVlc3RUb1NpZ24sIHtcbiAgICAgIGV4cGlyZXNJbjogOTAwLFxuICAgICAgdW5zaWduYWJsZUhlYWRlcnMsXG4gICAgICB1bmhvaXN0YWJsZUhlYWRlcnMsXG4gICAgICAuLi5vcHRpb25zLFxuICAgIH0pO1xuICB9XG59XG4iXX0=