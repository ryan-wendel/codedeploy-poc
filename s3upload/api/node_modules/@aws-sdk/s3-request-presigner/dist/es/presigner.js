import { __assign, __awaiter, __generator, __rest } from "tslib";
import { SignatureV4 } from "@aws-sdk/signature-v4";
import { SHA256_HEADER, UNSIGNED_PAYLOAD } from "./constants";
var S3RequestPresigner = /** @class */ (function () {
    function S3RequestPresigner(options) {
        var resolvedOptions = __assign({ 
            // Allow `signingName` because we want to support usecase of supply client's resolved config
            // directly. Where service equals signingName.
            service: options.signingName || options.service || "s3", uriEscapePath: options.uriEscapePath || false }, options);
        this.signer = new SignatureV4(resolvedOptions);
    }
    S3RequestPresigner.prototype.presign = function (requestToSign, _a) {
        if (_a === void 0) { _a = {}; }
        var _b = _a.unsignableHeaders, unsignableHeaders = _b === void 0 ? new Set() : _b, _c = _a.unhoistableHeaders, unhoistableHeaders = _c === void 0 ? new Set() : _c, options = __rest(_a, ["unsignableHeaders", "unhoistableHeaders"]);
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_d) {
                unsignableHeaders.add("content-type");
                // S3 requires SSE headers to be signed in headers instead of query
                // See: https://github.com/aws/aws-sdk-js-v3/issues/1576
                Object.keys(requestToSign.headers)
                    .map(function (header) { return header.toLowerCase(); })
                    .filter(function (header) { return header.startsWith("x-amz-server-side-encryption"); })
                    .forEach(function (header) {
                    unhoistableHeaders.add(header);
                });
                requestToSign.headers[SHA256_HEADER] = UNSIGNED_PAYLOAD;
                return [2 /*return*/, this.signer.presign(requestToSign, __assign({ expiresIn: 900, unsignableHeaders: unsignableHeaders,
                        unhoistableHeaders: unhoistableHeaders }, options))];
            });
        });
    };
    return S3RequestPresigner;
}());
export { S3RequestPresigner };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2lnbmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3ByZXNpZ25lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFdBQVcsRUFBMEMsTUFBTSx1QkFBdUIsQ0FBQztBQUk1RixPQUFPLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBYzlEO0lBRUUsNEJBQVksT0FBa0M7UUFDNUMsSUFBTSxlQUFlO1lBQ25CLDRGQUE0RjtZQUM1Riw4Q0FBOEM7WUFDOUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxXQUFXLElBQUksT0FBTyxDQUFDLE9BQU8sSUFBSSxJQUFJLEVBQ3ZELGFBQWEsRUFBRSxPQUFPLENBQUMsYUFBYSxJQUFJLEtBQUssSUFDMUMsT0FBTyxDQUNYLENBQUM7UUFDRixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFWSxvQ0FBTyxHQUFwQixVQUNFLGFBQTJCLEVBQzNCLEVBQThHO1FBQTlHLG1CQUFBLEVBQUEsT0FBOEc7UUFBNUcsSUFBQSx5QkFBNkIsRUFBN0IsaUJBQWlCLG1CQUFHLElBQUksR0FBRyxFQUFFLEtBQUEsRUFBRSwwQkFBOEIsRUFBOUIsa0JBQWtCLG1CQUFHLElBQUksR0FBRyxFQUFFLEtBQUEsRUFBSyxPQUFPLGNBQTNFLDJDQUE2RSxDQUFGOzs7Z0JBRTNFLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztnQkFDdEMsbUVBQW1FO2dCQUNuRSx3REFBd0Q7Z0JBQ3hELE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQztxQkFDL0IsR0FBRyxDQUFDLFVBQUMsTUFBTSxJQUFLLE9BQUEsTUFBTSxDQUFDLFdBQVcsRUFBRSxFQUFwQixDQUFvQixDQUFDO3FCQUNyQyxNQUFNLENBQUMsVUFBQyxNQUFNLElBQUssT0FBQSxNQUFNLENBQUMsVUFBVSxDQUFDLDhCQUE4QixDQUFDLEVBQWpELENBQWlELENBQUM7cUJBQ3JFLE9BQU8sQ0FBQyxVQUFDLE1BQU07b0JBQ2Qsa0JBQWtCLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUNqQyxDQUFDLENBQUMsQ0FBQztnQkFDTCxhQUFhLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxHQUFHLGdCQUFnQixDQUFDO2dCQUN4RCxzQkFBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxhQUFhLGFBQ3RDLFNBQVMsRUFBRSxHQUFHLEVBQ2QsaUJBQWlCLG1CQUFBO3dCQUNqQixrQkFBa0Isb0JBQUEsSUFDZixPQUFPLEVBQ1YsRUFBQzs7O0tBQ0o7SUFDSCx5QkFBQztBQUFELENBQUMsQUFsQ0QsSUFrQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTaWduYXR1cmVWNCwgU2lnbmF0dXJlVjRDcnlwdG9Jbml0LCBTaWduYXR1cmVWNEluaXQgfSBmcm9tIFwiQGF3cy1zZGsvc2lnbmF0dXJlLXY0XCI7XG5pbXBvcnQgeyBSZXF1ZXN0UHJlc2lnbmVyLCBSZXF1ZXN0UHJlc2lnbmluZ0FyZ3VtZW50cyB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuaW1wb3J0IHsgSHR0cFJlcXVlc3QgYXMgSUh0dHBSZXF1ZXN0IH0gZnJvbSBcIkBhd3Mtc2RrL3R5cGVzXCI7XG5cbmltcG9ydCB7IFNIQTI1Nl9IRUFERVIsIFVOU0lHTkVEX1BBWUxPQUQgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcblxuLyoqXG4gKiBQYXJ0aWFsQnk8VCwgSz4gbWFrZXMgcHJvcGVydGllcyBzcGVjaWZpZWQgaW4gSyBvcHRpb25hbCBpbiBpbnRlcmZhY2UgVFxuICogc2VlOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80MzE1OTg4Ny9tYWtlLWEtc2luZ2xlLXByb3BlcnR5LW9wdGlvbmFsLWluLXR5cGVzY3JpcHRcbiAqICovXG50eXBlIE9taXQ8VCwgSyBleHRlbmRzIGtleW9mIFQ+ID0gUGljazxULCBFeGNsdWRlPGtleW9mIFQsIEs+PjtcbnR5cGUgUGFydGlhbEJ5PFQsIEsgZXh0ZW5kcyBrZXlvZiBUPiA9IE9taXQ8VCwgSz4gJiBQYXJ0aWFsPFBpY2s8VCwgSz4+O1xuXG5leHBvcnQgdHlwZSBTM1JlcXVlc3RQcmVzaWduZXJPcHRpb25zID0gUGFydGlhbEJ5PFxuICBTaWduYXR1cmVWNEluaXQgJiBTaWduYXR1cmVWNENyeXB0b0luaXQsXG4gIFwic2VydmljZVwiIHwgXCJ1cmlFc2NhcGVQYXRoXCJcbj4gJiB7IHNpZ25pbmdOYW1lPzogc3RyaW5nIH07XG5cbmV4cG9ydCBjbGFzcyBTM1JlcXVlc3RQcmVzaWduZXIgaW1wbGVtZW50cyBSZXF1ZXN0UHJlc2lnbmVyIHtcbiAgcHJpdmF0ZSByZWFkb25seSBzaWduZXI6IFNpZ25hdHVyZVY0O1xuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBTM1JlcXVlc3RQcmVzaWduZXJPcHRpb25zKSB7XG4gICAgY29uc3QgcmVzb2x2ZWRPcHRpb25zID0ge1xuICAgICAgLy8gQWxsb3cgYHNpZ25pbmdOYW1lYCBiZWNhdXNlIHdlIHdhbnQgdG8gc3VwcG9ydCB1c2VjYXNlIG9mIHN1cHBseSBjbGllbnQncyByZXNvbHZlZCBjb25maWdcbiAgICAgIC8vIGRpcmVjdGx5LiBXaGVyZSBzZXJ2aWNlIGVxdWFscyBzaWduaW5nTmFtZS5cbiAgICAgIHNlcnZpY2U6IG9wdGlvbnMuc2lnbmluZ05hbWUgfHwgb3B0aW9ucy5zZXJ2aWNlIHx8IFwiczNcIixcbiAgICAgIHVyaUVzY2FwZVBhdGg6IG9wdGlvbnMudXJpRXNjYXBlUGF0aCB8fCBmYWxzZSxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgfTtcbiAgICB0aGlzLnNpZ25lciA9IG5ldyBTaWduYXR1cmVWNChyZXNvbHZlZE9wdGlvbnMpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHByZXNpZ24oXG4gICAgcmVxdWVzdFRvU2lnbjogSUh0dHBSZXF1ZXN0LFxuICAgIHsgdW5zaWduYWJsZUhlYWRlcnMgPSBuZXcgU2V0KCksIHVuaG9pc3RhYmxlSGVhZGVycyA9IG5ldyBTZXQoKSwgLi4ub3B0aW9ucyB9OiBSZXF1ZXN0UHJlc2lnbmluZ0FyZ3VtZW50cyA9IHt9XG4gICk6IFByb21pc2U8SUh0dHBSZXF1ZXN0PiB7XG4gICAgdW5zaWduYWJsZUhlYWRlcnMuYWRkKFwiY29udGVudC10eXBlXCIpO1xuICAgIC8vIFMzIHJlcXVpcmVzIFNTRSBoZWFkZXJzIHRvIGJlIHNpZ25lZCBpbiBoZWFkZXJzIGluc3RlYWQgb2YgcXVlcnlcbiAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9hd3MvYXdzLXNkay1qcy12My9pc3N1ZXMvMTU3NlxuICAgIE9iamVjdC5rZXlzKHJlcXVlc3RUb1NpZ24uaGVhZGVycylcbiAgICAgIC5tYXAoKGhlYWRlcikgPT4gaGVhZGVyLnRvTG93ZXJDYXNlKCkpXG4gICAgICAuZmlsdGVyKChoZWFkZXIpID0+IGhlYWRlci5zdGFydHNXaXRoKFwieC1hbXotc2VydmVyLXNpZGUtZW5jcnlwdGlvblwiKSlcbiAgICAgIC5mb3JFYWNoKChoZWFkZXIpID0+IHtcbiAgICAgICAgdW5ob2lzdGFibGVIZWFkZXJzLmFkZChoZWFkZXIpO1xuICAgICAgfSk7XG4gICAgcmVxdWVzdFRvU2lnbi5oZWFkZXJzW1NIQTI1Nl9IRUFERVJdID0gVU5TSUdORURfUEFZTE9BRDtcbiAgICByZXR1cm4gdGhpcy5zaWduZXIucHJlc2lnbihyZXF1ZXN0VG9TaWduLCB7XG4gICAgICBleHBpcmVzSW46IDkwMCxcbiAgICAgIHVuc2lnbmFibGVIZWFkZXJzLFxuICAgICAgdW5ob2lzdGFibGVIZWFkZXJzLFxuICAgICAgLi4ub3B0aW9ucyxcbiAgICB9KTtcbiAgfVxufVxuIl19