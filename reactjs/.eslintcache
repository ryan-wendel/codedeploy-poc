[{"/data/node/reactjs/src/index.js":"1","/data/node/reactjs/src/App.js":"2","/data/node/reactjs/src/reportWebVitals.js":"3","/tmp/codedeploy-poc/reactjs/src/index.js":"4","/tmp/codedeploy-poc/reactjs/src/App.js":"5","/tmp/codedeploy-poc/reactjs/src/reportWebVitals.js":"6"},{"size":500,"mtime":1612053615430,"results":"7","hashOfConfig":"8"},{"size":10753,"mtime":1613594467814,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1612052167119,"results":"10","hashOfConfig":"8"},{"size":500,"mtime":1614967452074,"results":"11","hashOfConfig":"12"},{"size":10753,"mtime":1614967452074,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1614967452074,"results":"14","hashOfConfig":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"17sqv0d",{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"17"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"sdtqb6",{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/data/node/reactjs/src/index.js",[],["30","31"],"/data/node/reactjs/src/App.js",["32"],"import logo from './logo.svg';\nimport './App.css';\n\nconst { Component } = require('react');\n\nconst axios = require('axios');\n\n // keep a util handy to dump objects\n const util = require('util');\n //console.log(util.inspect(error, {depth: null}))\n\n // grab our env variables\n const dotenv = require('dotenv');\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        // grab our environment vars\n        dotenv.config();\n    \n        // set \"the state\" (great old school show, btw)\n        this.state = {\n            apiUrl: 'http://' + process.env.REACT_APP_UPLOAD_API_HOST + ':' + process.env.REACT_APP_UPLOAD_API_PORT,\n            fileTypeSelectOptions: [],\n            fileTypeSelectOptionsValue: 0,\n            fileTypeInfo: [],\n            selectedFile: '',\n            fileTypeHelp: '',\n            fileTable: [],\n            statusElement: '',\n            uploadTable: []\n        };\n    }\n\n    componentDidMount() {  \n        // grab our file type info \n        axios.get(this.state.apiUrl + '/getFileTypes').then(response => {\n            const data = response.data.data;\n            this.setState({ fileTypeInfo: data });\n            this.setState({ fileTypeHelp: data[this.state.fileTypeSelectOptionsValue].help });\n        }).catch(response => {\n            if(!response.data) {\n                this.setState({ statusElement: <div id='Status' className='alert alert-danger'>Problem accessing back-end</div>});\n            } else {\n                this.setState({ statusElement: <div id='Status' className='alert alert-danger'>{response.data.message}</div>});\n            }\n        });\n\n        // grab list of files and build our table\n        this.setFilesTable();\n    }\n\n    onDeleteClick = (id, event) => {\n        /*\n        // set up some headers\n        const options = {\n            headers: {'Content-Type': 'application/json; charset=utf-8'}\n        };\n\n        // nuke the file from S3 and the database using query strings\n        //axios.delete(this.state.apiUrl + '/deleteFile?id=' + event.target.dataset.id, options);\n        axios.delete(this.state.apiUrl + '/deleteFile?id=' + id, options);\n        */\n\n        // nuke the file from S3 and the database using JSON in body\n        axios.delete(\n            this.state.apiUrl + '/deleteFile', {\n                headers: {\n                    'Content-Type': 'application/json; charset=utf-8'\n                },\n                data: {\n                    'id': id\n                }\n        }).then(response => {\n            this.setState({ statusElement: <div id='Status' className='alert alert-success'>{response.data.message}</div>});\n\n            // refresh the files table\n            this.setFilesTable();\n        }).catch(response => {\n            if(!response.data) {\n                this.setState({ statusElement: <div id='Status' className='alert alert-danger'>Problem accessing back-end</div>});\n            } else {\n                this.setState({ statusElement: <div id='Status' className='alert alert-danger'>{response.data.message}</div>});\n            }\n        });\n    }\n\n    onDownloadClick = (id, event) => {\n        //axios.get(this.state.apiUrl + '/getUrl?id=' + event.target.dataset.id).then(response => {\n        axios.get(this.state.apiUrl + '/getUrl?id=' + id).then(response => {\n            window.open(response.data.url, '_blank', 'noopener,noreferrer')\n        }).catch(response => {\n            if(!response.data) {\n                this.setState({ statusElement: <div id='Status' className='alert alert-danger'>Problem accessing back-end</div>});\n            } else {\n                this.setState({ statusElement: <div id='Status' className='alert alert-danger'>{response.data.message}</div>});\n            }\n        });\n    }\n  \n    // On file select (from the pop up)\n    onFileChange = event => {\n        // Update the state\n        this.setState({ selectedFile: event.target.files[0] });\n    };\n\n    // On file type select\n    onTypeChange = event => {\n        // Update the state\n        this.setState({ fileTypeHelp: this.state.fileTypeInfo[event.target.value].help });\n        this.setState({ fileTypeSelectOptionsValue: event.target.value });\n    };\n\n    // On description change\n    onDescChange = event => {\n        // Update the state\n        this.setState({ description: event.target.value });\n    };\n  \n    // On file upload (click the upload button)\n    onSubmit = event => {\n        // Was the fileTypeInfo state populated?\n        if(!this.state.fileTypeInfo[this.state.fileTypeSelectOptionsValue]) {\n            this.setState({ statusElement: <div id='Status' className='alert alert-danger'>Missing file type info</div>});\n            return;\n        }\n\n        // was a file selected?\n        if(!this.state.selectedFile.name) {\n            this.setState({ statusElement: <div id='Status' className='alert alert-danger'>Please select a file to upload</div>});\n            return;\n        }\n\n        // Create a formData object to help transmit our file\n        const formData = new FormData();\n\n        // Append the file to the formData object\n        formData.append(\n            \"file\",\n            this.state.selectedFile,\n            this.state.selectedFile.name\n        );\n\n        // append the file type to the formData object\n        formData.append(\n            \"fileType\",\n            this.state.fileTypeInfo[this.state.fileTypeSelectOptionsValue].type\n        );\n\n        // append the file description to the formData object\n        formData.append(\n            \"description\",\n            this.state.description\n        );\n\n\t    // Make the request to the backend api\n        axios.post(this.state.apiUrl + '/uploadFile', formData).then(response => {\n            this.setState({ statusElement: <div id='Status' className='alert alert-success'>{response.data.message}</div>});\n\n            // refresh the files table\n            this.setFilesTable();\n        }).catch(response => {\n            if(!response.response) {\n                this.setState({ statusElement: <div id='Status' className='alert alert-danger'>Problem accessing back-end</div>});\n            } else {\n                this.setState({ statusElement: <div id='Status' className='alert alert-danger'>{response.response.data.message}</div>});\n            }\n        });\n    };\n\n    getfileTypeSelectOptions = () => {\n        const data = this.state.fileTypeInfo;\n\n        const selectOptions = [];\n\n        for(let i = 0; i < data.length; i++) {\n            selectOptions.push(<option value={i} key={i}>{data[i].text}</option>);\n        } \n        return selectOptions;\n    }\n  \n    getfileData = () => {\n        if (this.state.selectedFile) {\n            return (\n                <p className='m-t-10px'>File Name: {this.state.selectedFile.name}</p>\n            );\n        } \n    };\n\n    setFilesTable = () => {\n        // grab list of files and build a table\n        axios.get(this.state.apiUrl + '/getFiles').then(response => {\n            const data = response.data.data;\n            const tableRows = [];\n\n            for(let i = 0; i < data.length; i++) {\n                tableRows.push(<tr key={i}>\n                        <td>{data[i].name}</td>\n                        <td>{data[i].description}</td>\n                        <td className='Download-Column'>\n                            <button className='btn btn-success btn-sm' onClick={this.onDownloadClick.bind(this, data[i]._id)}>\n                                <span></span> Download\n                            </button>\n                        </td>\n                        <td className='Delete-Column'>\n                            <button className='btn btn-danger btn-sm' onClick={this.onDeleteClick.bind(this, data[i]._id)}>\n                                <span></span> Delete\n                            </button>\n                        </td>\n                    </tr>\n                );\n            }  \n\n            const fileTable = <table className='table table-hover table-bordered table-striped m-t-15px'>\n                <tbody>\n                    {tableRows}\n                </tbody>\n            </table>;\n\n            this.setState({ fileTable: fileTable });\n        }).catch(response => {\n            if(!response.data) {\n                this.setState({ statusElement: <div id='Status' className='alert alert-danger'>Problem accessing back-end</div>});\n            } else {\n                this.setState({ statusElement: <div id='Status' className='alert alert-danger'>{response.data.message}</div>});\n            }\n        });\n    }\n\n    render() {\n        return (\n            <>\n                <div className='App'>\n                    <header className='App-header'>\n                        <img src={logo} className='App-logo' alt='logo' />\n                    </header>\n                    <div id='Main'>\n                        {this.state.statusElement}\n                        <table className='table table-hover table-bordered'>\n                            <tbody>\n                                <tr>\n                                    <td className='w-15-pct'>Description</td>\n                                    <td><input type='text' className='form-control' onChange={this.onDescChange.bind(this)} required /></td>\n                                </tr>\n                                <tr>\n                                    <td className='w-15-pct'>Type</td>\n                                    <td>\n                                        <select className='Left m-l-10px' onChange={this.onTypeChange.bind(this)} value={this.state.fileTypeSelectOptionsValue} required>\n                                            {this.getfileTypeSelectOptions()}\n                                        </select>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td className='w-15-pct'>Image</td>\n                                    <td>\n                                        <input type='file' className='form-control' onChange={this.onFileChange.bind(this)} required />\n                                        <small className='form-text text-muted'>{this.state.fileTypeHelp}</small>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                        <button type='button' className='btn btn-primary' onClick={this.onSubmit.bind(this)}>\n                            <span></span> Upload File\n                        </button>\n                        {this.getfileData()}\n                        {this.state.fileTable}\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default App;","/data/node/reactjs/src/reportWebVitals.js",[],["33","34"],"/tmp/codedeploy-poc/reactjs/src/index.js",[],"/tmp/codedeploy-poc/reactjs/src/App.js",["35"],"/tmp/codedeploy-poc/reactjs/src/reportWebVitals.js",[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":9,"column":8,"nodeType":"42","messageId":"43","endLine":9,"endColumn":12},{"ruleId":"36","replacedBy":"44"},{"ruleId":"38","replacedBy":"45"},{"ruleId":"40","severity":1,"message":"41","line":9,"column":8,"nodeType":"42","messageId":"43","endLine":9,"endColumn":12},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"no-unused-vars","'util' is assigned a value but never used.","Identifier","unusedVar",["46"],["47"],"no-global-assign","no-unsafe-negation"]